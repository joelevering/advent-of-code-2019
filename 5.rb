class IntcodeComputer
  PositionMode = "position"
  ImmediateMode = "immediate"
  @mode = PositionMode
  @output = nil

  def compute(input, starting_input)
    hashed_input = hash_input(input)

    pointer = 0
    while true do
      cmd = hashed_input[pointer]
      ops_code = get_ops_code(cmd)
      modes = get_modes(cmd)

      case ops_code 
      when "99"
        break
      when "01"
        args = [hashed_input[pointer+1], hashed_input[pointer+2], hashed_input[pointer+3]]
        res = get_value(hashed_input, args[0], modes[0]) + get_value(hashed_input, args[1], modes[1])
        put_value(hashed_input, res, args[2])
      when "02"
        args = [hashed_input[pointer+1], hashed_input[pointer+2], hashed_input[pointer+3]]
        res = get_value(hashed_input, args[0], modes[0]) * get_value(hashed_input, args[1], modes[1])
        put_value(hashed_input, res, args[2])
      when "03"
        arg = hashed_input[pointer+1]
        hashed_input[arg] = starting_input
      when "04"
        arg = hashed_input[pointer+1]
        @output = get_value(hashed_input, arg, modes[0])
        puts @output
      end

      pointer += instructions_for_ops_code(ops_code)
    end
  end

  def get_value(hash, param, mode)
    if mode == PositionMode
      hash[param]
    elsif mode == ImmediateMode
      param
    end
  end

  def put_value(hash, val, param)
    hash[param] = val
  end

  def hash_input(input)
    h = {}
    input.split(",").each_with_index do |n, i|
      h[i] = n.to_i
    end

    return h
  end

  def get_ops_code(cmd)
    format("%02d", cmd)[-2..-1]
  end

  def get_modes(cmd)
    map = format("%05d", cmd)[0..2].reverse.split("").map do |c|
      if c == "0"
        PositionMode
      elsif c == "1"
        ImmediateMode
      end
    end
  end

  def instructions_for_ops_code(ops_code)
    case ops_code
    when "01", "02"
      4
    when "03", "04"
      2
    end
  end
end

day_five = "3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226"

comp = IntcodeComputer.new
comp.compute(day_five, 1)

puts "EXPECTED: 5074395"
